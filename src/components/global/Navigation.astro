---
let pages = [
	{
		title: "Home",
		link: "/",
	},
	{
		title: "Store",
		link: "/store",
	},
	{
		title: "Blog",
		link: "/blog",
	},
	{
		title: "Contact",
		link: "/contact",
	},
];
---

<header class="header w-full bg-white text-xs z-50">
	<div class="inline-flex w-full items-center justify-between mx-auto">
		<div x-data="{ open: false }" class="relative flex flex-col w-full mx-auto md:items-center md:justify-between md:flex-row md:px-12 lg:px-12">
			<div class="flex flex-row items-center justify-between lg:justify-start py-6 px-4 md:px-0">
				<a class="gap-2 text-sm inline-flex items-center text-black uppercase focus:outline-none focus:ring" href="/">
					<svg width="1rem" height="1rem" viewBox="6 6 11 11" xmlns="http://www.w3.org/2000/svg" fill="currentColor">
						<path d="M17 8V17H8V15H13V14H12V13H11V12H10V11H9V10H8V9H7L7 8H6V7H7V6H8L8 7H9V8H10V9H11V10H12V11H13V12H14V13H15V8H17Z"></path>
					</svg>
					Astroshop
				</a>
			</div>
			<nav
				:style="open ? 'height: 100%' : 'height: auto'"
				class="fixed right-0 top-0 z-50 max-w-full items-center w-[50rem] bg-black text-white flex md:flex-row-reverse">
				<div
					:class="{'flex': open, 'hidden': !open}"
					class="flex-col pl-4 top-0 right-0 items-center flex-grow hidden md:flex md:justify-start md:flex-row">
					{
						pages.map((page, index) => {
							return (
								<a class="px-4 py-6 text-sm lg:px-6 md:px-3 hover:text-black hover:bg-white" href={page.link}>
									{page.title}
								</a>
							);
						})
					}
				</div>
				<button
					@click="open = !open"
					class="inline-flex absolute top-0 md:relative items-center right-0 justify-center p-6 text-gray-400 hover:text-gray-600">
					<svg class="w-6 h-6" stroke="currentColor" fill="none" viewBox="0 0 24 24">
						<path
							:class="{'hidden': open, 'inline-flex': !open }"
							class="inline-flex"
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M4 6h16M4 12h16M4 18h16">
						</path>
						<path
							:class="{'hidden': !open, 'inline-flex': open }"
							class="hidden"
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M6 18L18 6M6 6l12 12">
						</path>
					</svg>
				</button>
			</nav>
		</div>
	</div>
</header>

<script>
	import { gsap } from "gsap";
	import { ScrollTrigger } from "gsap/ScrollTrigger";

	gsap.registerPlugin(ScrollTrigger);

	function init() {
		const navContainer = document.querySelector("header.header nav") as HTMLElement;

		let isHoveringMenu = false;
		let menuCollapsed = false;

		let menuCollapseTl = gsap
			.timeline({
				defaults: {
					ease: "expo.inOut",
					duration: 0.3,
				},
				paused: true,
			})
			.to("header.header nav", {
				x: function () {
					let navbarWidth = this._targets[0].offsetWidth;
					let buttonWidth = this._targets[0].querySelector("button").offsetWidth;

					return navbarWidth - buttonWidth;
				},
			});

		const isTouchDevice = window.matchMedia("(hover: none)").matches;

		if (window.innerWidth >= 768 && !isTouchDevice) {
			function expandMenu() {
				menuCollapseTl.reverse();
				document.querySelector("header.header nav")?.classList.remove("collapsed");
				menuCollapsed = false;
			}

			function collapseMenu() {
				if (window.scrollY > 200) {
					menuCollapseTl.play();
					document.querySelector("header.header nav")?.classList.add("collapsed");
					menuCollapsed = true;
				}
			}

			function mouseEnterHandler() {
				isHoveringMenu = true;
				expandMenu();
			}

			function mouseLeaveHandler() {
				isHoveringMenu = false;
				collapseMenu();
			}

			function handleScroll() {
				if (window.scrollY > 200 && !isHoveringMenu && !menuCollapsed) {
					collapseMenu();
				} else if (window.scrollY <= 200 && menuCollapsed) {
					expandMenu();
				}
			}

			navContainer?.removeEventListener("mouseenter", mouseEnterHandler);
			navContainer?.addEventListener("mouseenter", mouseEnterHandler);

			navContainer?.removeEventListener("mouseleave", mouseLeaveHandler);
			navContainer?.addEventListener("mouseleave", mouseLeaveHandler);

			window?.removeEventListener("scroll", handleScroll);
			window?.addEventListener("scroll", handleScroll);
		}
	}

	document.removeEventListener("DOMContentLoaded", init);
	document.addEventListener("DOMContentLoaded", init);
</script>
